cumulative <- c()
probability <- c()
for (k in 0:5) {
probability[k+1] <- bin_probability(k, 5, 0.5)
cumulative[k+1] <- cumulative[k] + bin_probability(k, 5, 0.5)
}
cumulative
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c(bin_probability(0, n, p))
cumsum <- 0
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- cumulative[k] + bin_probability(k, n, p)
}
return(data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative))
}
bin_cumulative(5, 0.5)
cumulative
a <- c(0:5)
sum(a[1:4])
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c()
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- sum(probability[1:k+1])
}
return(data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative))
}
bin_cumulative(5, 0.5)
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c()
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- sum(probability[1:k])
}
return(data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative))
}
bin_cumulative(5, 0.5)
a <- c(0:5)
sum(a[1:4])
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c()
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- sum(probability[1:k+1])
}
return(data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative))
}
bin_cumulative(5, 0.5)
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c()
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- sum(probability[0:k+1])
}
return(data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative))
}
bin_cumulative(5, 0.5)
plot.bincum <- function(n, p) {
dis <- bin_cumulative(n, p)
lines(dis)
}
plot.bincum(5, 0.5)
?lines
plot.bincum <- function(n, p) {
dis <- bin_cumulative(n, p)
lines(x = dis$success, y = dis$cumulative)
}
plot.bincum(5, 0.5)
plot(x = dis$success, y = dis$cumulative)
plot.bincum <- function(n, p) {
dis <- bin_cumulative(n, p)
plot(x = dis$success, y = dis$cumulative)
}
plot.bincum(5, 0.5)
plot.bincum <- function(n, p) {
dis <- bin_cumulative(n, p)
plot(x = dis$success, y = dis$cumulative, type = "o")
}
plot.bincum(5, 0.5)
plot.bincum <- function(n, p) {
dis <- bin_cumulative(n, p)
plot(x = dis$success, y = dis$cumulative, type = "o",
xlab = "success", ylab = "probability")
}
plot.bincum(5, 0.5)
bin_variable <- function(n, p) {
check_trials(n)
check_prob(p)
return(list("trial" = n, "prob" = p))
}
bin_variable(5, 0.5)
knitr::opts_chunk$set(echo = TRUE)
aux_mode <- function(trials, prob) {
if (is.integer(trials * prob + prob)) {
return (as.integer(prob + prob * trials))
}
###https://github.com/stat133-sp19/hw-stat133-PeijieLi/blob/master/workout03/R/binomial.R
# private function to check if an input prob is a valid probability value
check_prob <- function(prob) {
if (prob <= 1 | prob >= 0) {
return(TRUE)
} else {
stop("invalid prob value")
}
}
# private function to check if an input trials is a non-negative integer
check_trials <- function(trials) {
if (trials >= 0) {
return(TRUE)
} else {
stop("invalid trials value")
}
}
# private function to check if an input success is valid
check_success <- function(success, trials) {
if (all(success) >= 0 & length(success) <= trials) {
return(TRUE)
} else {
stop("invalid success value")
}
}
# private function to compute the mean
aux_mean <- function(trials, prob) {
return (trials * prob)
}
# private function to compute the variance
aux_variance <- function(trials, prob) {
return (trials * prob * (1 - prob))
}
# private function to compute the mode
aux_mode <- function(trials, prob) {
if (is.integer(trials * prob + prob)) {
return (as.integer(prob + prob * trials))
}
# private function to compute the skewness
aux_skewness <- function(trials, prob) {
return((1-2*prob)/sqrt(trials*prob*(1-prob)))
}
# private function to compute the kurtosis
aux_kurtosis <- function(trials, prob) {
return((1-6*prob*(1-prob))/(trials*prob*(1-prob)))
}
# checks for private auxillary functions
aux_mean(10, 0.3)
aux_variance(10, 0.3)
aux_mode(10, 0.3)
aux_skewness(10, 0.3)
aux_kurtosis(10, 0.3)
#' @title Number of Success
#' @description to calculate the number of combinations in which k successes can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return number of successes can occur in n trials
bin_choose <- function(n, k) {
if (k > n) {
stop("k cannot be greater than n")
} else {
return(factorial(n) / (factorial(k) * factorial(n - k)))
}
}
bin_choose(n = 5, k = 2)
bin_choose(5, 0)
bin_choose(5, 1:3)
#' @title Probability of Success
#' @description to calculate the probability of a certian number of successes in n trials
#' @param n number of trials
#' @param k number of successes
#' @param p probability of success
#' @return probability of a certian number of successes in n trials
bin_probability <- function(k, n, p) {
check_trials(n)
check_prob(p)
check_success(k, n)
return(bin_choose(n, k)*p^k*(1-p)^(n-k))
}
bin_probability(2, 5, 0.5)
bin_probability(0:2, 5, 0.5)
bin_probability(55, 100, 0.45)
#' @title Probability Distribution
#' @description to create a dataframe of the binomial distribution
#' @param n number of trials
#' @param p probability of success
#' @return a data frame with the probability distribution
bin_distribution <- function(n, p) {
probs <- length(n)
for (k in 0:n) {
probs[k+1] <- bin_probability(k, n, p)
}
return(data.frame("success" = c(0:n), "probability" = probs))
}
bin_distribution(5, 0.5)
#' @export
plot.bindis <- function(n, p) {
dis <- bin_distribution(n, p)
barplot(height = dis$probability,
names.arg = dis$success,
xlab = "success", ylab = "probability")
}
#' @title Cumulative probabilities
#' @description to create a dataframe of the binomial distribution
#' @param n number of trials
#' @param p probability of success
#' @return a data frame with the probability distribution
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c()
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- sum(probability[0:k+1])
}
return(data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative))
}
#' @export
plot.bincum <- function(n, p) {
dis <- bin_cumulative(n, p)
plot(x = dis$success, y = dis$cumulative, type = "o",
xlab = "success", ylab = "probability")
}
plot.bincum(5, 0.5)
#' @title Binomial Random Variable
#' @description to create an ojbect of class binvar
#' @param n number of trials
#' @param p probability of success
#' @return a list with named elements trials and prob
bin_variable <- function(n, p) {
check_trials(n)
check_prob(p)
return(list("trial" = n, "prob" = p))
}
#' @export
# private function to check if an input prob is a valid probability value
check_prob <- function(prob) {
if (prob <= 1 | prob >= 0) {
return(TRUE)
} else {
stop("invalid prob value")
}
}
# private function to check if an input trials is a non-negative integer
check_trials <- function(trials) {
if (trials >= 0) {
return(TRUE)
} else {
stop("invalid trials value")
}
}
# private function to check if an input success is valid
check_success <- function(success, trials) {
if (all(success) >= 0 & length(success) <= trials) {
return(TRUE)
} else {
stop("invalid success value")
}
}
# private function to compute the mean
aux_mean <- function(trials, prob) {
return (trials * prob)
}
# private function to compute the variance
aux_variance <- function(trials, prob) {
return (trials * prob * (1 - prob))
}
# private function to compute the mode
aux_mode <- function(trials, prob) {
if (is.integer(trials * prob + prob)) {
return (as.integer(prob + prob * trials))
}
# private function to compute the skewness
aux_skewness <- function(trials, prob) {
return((1-2*prob)/sqrt(trials*prob*(1-prob)))
}
# private function to compute the kurtosis
aux_kurtosis <- function(trials, prob) {
return((1-6*prob*(1-prob))/(trials*prob*(1-prob)))
}
# checks for private auxillary functions
aux_mean(10, 0.3)
aux_variance(10, 0.3)
aux_mode(10, 0.3)
aux_skewness(10, 0.3)
aux_kurtosis(10, 0.3)
#' @title Number of Success
#' @description to calculate the number of combinations in which k successes can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return number of successes can occur in n trials
bin_choose <- function(n, k) {
if (k > n) {
stop("k cannot be greater than n")
} else {
return(factorial(n) / (factorial(k) * factorial(n - k)))
}
}
bin_choose(n = 5, k = 2)
bin_choose(5, 0)
bin_choose(5, 1:3)
#' @title Probability of Success
#' @description to calculate the probability of a certian number of successes in n trials
#' @param n number of trials
#' @param k number of successes
#' @param p probability of success
#' @return probability of a certian number of successes in n trials
bin_probability <- function(k, n, p) {
check_trials(n)
check_prob(p)
check_success(k, n)
return(bin_choose(n, k)*p^k*(1-p)^(n-k))
}
bin_probability(2, 5, 0.5)
bin_probability(0:2, 5, 0.5)
bin_probability(55, 100, 0.45)
#' @title Probability Distribution
#' @description to create a dataframe of the binomial distribution
#' @param n number of trials
#' @param p probability of success
#' @return a data frame with the probability distribution
bin_distribution <- function(n, p) {
probs <- length(n)
for (k in 0:n) {
probs[k+1] <- bin_probability(k, n, p)
}
return(data.frame("success" = c(0:n), "probability" = probs))
}
bin_distribution(5, 0.5)
#' @export
plot.bindis <- function(n, p) {
dis <- bin_distribution(n, p)
barplot(height = dis$probability,
names.arg = dis$success,
xlab = "success", ylab = "probability")
}
#' @title Cumulative probabilities
#' @description to create a dataframe of the binomial distribution
#' @param n number of trials
#' @param p probability of success
#' @return a data frame with the probability distribution
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c()
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- sum(probability[0:k+1])
}
return(data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative))
}
#' @export
plot.bincum <- function(n, p) {
dis <- bin_cumulative(n, p)
plot(x = dis$success, y = dis$cumulative, type = "o",
xlab = "success", ylab = "probability")
}
plot.bincum(5, 0.5)
#' @title Binomial Random Variable
#' @description to create an ojbect of class binvar
#' @param n number of trials
#' @param p probability of success
#' @return a list with named elements trials and prob
bin_variable <- function(n, p) {
check_trials(n)
check_prob(p)
return(list("trial" = n, "prob" = p))
}
#' @export
aux_mode <- function(trials, prob) {
return (as.integer(prob + prob * trials))
}
bin_distribution <- function(n, p) {
success <- c(0:n)
probs <- bin_probability(success, n, p)
df <- dafa.frame(success = success, probability = probs)
class(df) <- append("bindis", class(df))
return(df)
}
bin_distribution(5, 0.5)
bin_distribution <- function(n, p) {
success <- 0:n
probs <- bin_probability(success, n, p)
df <- dafa.frame(success = success, probability = probs)
class(df) <- append("bindis", class(df))
return(df)
}
bin_distribution(5, 0.5)
bin_distribution <- function(n, p) {
success <- c(0:n)
probs <- length(n)
for (k in 0:n) {
probs[k+1] <- bin_probability(k, n, p)
}
df <- data.frame(success = success, probability = probs)
class(df) <- append("bindis", class(df))
return(df)
}
bin_distribution(5, 0.5)
library(ggplot2)
plot.bindis <- function(df) {
ggplot(df, aes(x = success, y = probability)) +
geom_bar(stat="identity", color = "grey") +
theme_minimal()
}
bin_cumulative <- function(n, p) {
success <- c(0:n)
probability <- c()
cumulative <- c()
for (k in 0:n) {
probability[k+1] <- bin_probability(k, n, p)
cumulative[k+1] <- sum(probability[0:k+1])
}
df <- data.frame("success" = success,
"probability" = probability,
"cumulative" = cumulative)
class(df) <- append("bincum", class(df))
return(df)
}
plot.bincum <- function(df) {
ggplot(df, aes(x=success, y=cumulative)) +
geom_path(stat = "identity", color="grey") +
geom_point() + ylab("probability") +
theme_minimal()
}
plot.bincum(5, 0.5)
bin_variable <- function(n, p) {
check_trials(n)
check_prob(p)
retVal <- (list("trial" = n, "prob" = p))
class(retVal) <- "binvar"
return(retVal)
}
print.binvar <- function(x, ...){
cat('"Binomial variable"\n\n')
cat('Parameters\n')
cat(sprintf('- number of trials: %s\n', x$trials))
cat(sprintf('- prob of success: %s', x$prob))
invisible(x)
}
summary.binvar <- function(x, ...) {
lst <- list(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob)
)
class(lst) <- "summary.binvar"
return(lst)
}
print.summary.binvar <- function(x, ...) {
cat('"Summary Binomial"\n\n')
cat('Parameters\n')
cat(sprintf('- number of trials: %s\n', x$trials))
cat(sprintf('- prob of success: %s\n\n', x$prob))
cat('Measures\n')
cat(sprintf('- mean: %s\n', x$mean))
cat(sprintf('- variance: %s\n', x$variance))
cat(sprintf('- mode: %s\n', x$mode))
cat(sprintf('- skewness: %s\n', x$skewness))
cat(sprintf('- kurtosis: %s\n', x$kurtosis))
invisible(x)
}
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
bin_mean(5, 0.3)
bin_mean(10, 0.3)
bin_mode <- function(n, p) {
check_trials(n)
check_prob(p)
return(aux_mode(n, p))
}
bin_mode <- function(n, p) {
check_trials(n)
check_prob(p)
return(aux_skewness(n, p))
}
bin_mode <- function(n, p) {
check_trials(n)
check_prob(p)
return(aux_kurtosis(n, p))
}
devtools::use_build_ignore("notes")
setwd("~/Desktop/binomial/R")
devtools::use_build_ignore("notes")
